[{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"CovidCAR Package Overview","text":"introduction briefly outlines core functions used preprocess observation data, build spatial-temporal models, post-process model outputs. purpose demonstrate standard workflow provide depth examination functions model building techniques.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"resources","dir":"Articles","previous_headings":"Overview","what":"Resources","title":"CovidCAR Package Overview","text":"CovidCAR GitHub page CovidCAR Functions Reference","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"CovidCAR Package Overview","text":"Load needed packages packages available CRAN need installed locations. CovidCAR currently GitHub","code":"#comments and prompts options(dplyr.summarise.inform = FALSE) library(cli)   #wrangling library(tidyverse) library(lubridate) library(arrow) library(Hmisc) library(yaml)  #spatial manipulation library(sp) library(sf) library(spdep) library(rgeos) library(igraph) library(maptools) library(mapproj)  #census data library(censusapi)  #forecast data library(zoltr) #Not available on CRAN #remotes::install_github(\"reichlab/zoltr\") library(covidHubUtils) #Not available on CRAN #remotes::install_github(\"reichlab/covidHubUtils\")  #inference library(INLA) #Not available on CRAN #install.packages(\"INLA\",repos=c(getOption(\"repos\"), #INLA=\"https://inla.r-inla-download.org/R/stable\"), dep=TRUE)  library(EpiEstim) library(forecast) library(CovidCAR) #devtools::install_github(\"JMHumphreys/CovidCAR\")"},{"path":[]},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"specifiy-dates-and-directories","dir":"Articles","previous_headings":"Setup Analysis","what":"Specifiy Dates and Directories","title":"CovidCAR Package Overview","text":"setup_analysis() function defines key date thresholds model training forecast horizon periods always run using functions CovidCAR package. dates written yaml file use functions. function also allows recording directory paths (optionally) write outputs outside working directory pull previously cached observation data (cache created Covid19Forecast.v1).","code":"my_ouputs <- \"C:/Users/unp7/Desktop/Misc/CovidCAR_tests\" my_local <- \"C:/Users/unp7/Desktop/GitHub/covid19Forecasts/local/cache\"  setup_analysis(report_date = \"2021-08-23\", #report date, first forecast day                training_period = 2*28, #days                forecast_horizon = 28, #days                output_dir = my_ouputs, #write outputs here                local_cache_dir = my_local #cache ) ## → Your local cache will be available to get_covid19_obs() ## → Analysis outputs will be written to C:/Users/unp7/Desktop/Misc/CovidCAR_tests/2021-08-23-CovidCAR-run2023-05-25"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"define-spatial-domain","dir":"Articles","previous_headings":"Setup Analysis","what":"Define Spatial Domain","title":"CovidCAR Package Overview","text":"download_boundaries() function pulls US State territorial boundaries (ESRI shapefiles) sources public domain. basic projection performed, shapefile converted SpatialPolygonsDataFrame, data attributes location identifier (‘Region’) name (‘State’) appended object. NOTE: function includes option download county boundaries (unit=“county”) timeout issues need resolved due large file size.","code":"States <- download_boundaries(unit = \"state\") ## → Downloading polygon files... ## Reading layer `us-state-boundaries' from data source  ##   `C:\\Users\\unp7\\Desktop\\Misc\\CovidCAR_tests\\2021-08-23-CovidCAR-run2023-05-25\\polygons'  ##   using driver `ESRI Shapefile' ## Simple feature collection with 56 features and 20 fields ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: -179.2311 ymin: -14.60181 xmax: 179.8597 ymax: 71.44069 ## Geodetic CRS:  WGS 84 class(States) ## [1] \"SpatialPolygonsDataFrame\" ## attr(,\"package\") ## [1] \"sp\" head(States@data[,c(\"Region\", \"State\")]) #appended attributes ##   Region          State ## 1      1 Virgin Islands ## 2      2      Wisconsin ## 3      3        Vermont ## 4      4     New Jersey ## 5      5       Colorado ## 6      6 South Carolina"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"adjacency-graph","dir":"Articles","previous_headings":"Setup Analysis","what":"Adjacency Graph","title":"CovidCAR Package Overview","text":"get_neighbors() function used identify polygons (States Territories example) located next . Neighbor information recorded matrix (dimensions: location*location) included CAR model. Estimates one location ‘conditional’ estimates surrounding locations. NOTE: Polygons representing locations Hawaii Guam isolated locations (termed ‘islands’) can problematic. One option situation force connections locations; function’s ‘connect’ option force connections islands locations based proximity. Example: Islands “links” Example: locations linked View mapped adjacency plot_neighbors() function overlays adjacency connections mapped location boundaries.   Convert INLA Graph nb2INLA() inla.read.graph() functions provided INLA package.","code":"nb_islands = get_neighbors(States, connect=FALSE) summary(nb_islands) #note that \"7 regions with no links\" ## Neighbour list object: ## Number of regions: 56  ## Number of nonzero links: 224  ## Percentage nonzero weights: 7.142857  ## Average number of links: 4  ## 7 regions with no links: ## 1 24 32 33 38 42 54 ## Link number distribution: ##  ##  0  1  2  3  4  5  6  7  8  ##  7  1  4  9  9 10 12  2  2  ## 1 least connected region: ## 13 with 1 link ## 2 most connected regions: ## 49 56 with 8 links nb_coerced = get_neighbors(States, connect=TRUE) summary(nb_coerced) ## Neighbour list object: ## Number of regions: 56  ## Number of nonzero links: 242  ## Percentage nonzero weights: 7.716837  ## Average number of links: 4.321429  ## Link number distribution: ##  ##  1  2  3  4  5  6  7  8  ##  5  3 10 12 10 11  3  2  ## 5 least connected regions: ## 1 13 38 42 54 with 1 link ## 2 most connected regions: ## 49 56 with 8 links plot_neighbors(States, nb_islands) ## Regions defined for each Polygons plot_neighbors(States, nb_coerced) ## Regions defined for each Polygons nb2INLA(\"J\", nb_coerced) J = inla.read.graph(\"J\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"retrieve-observation-data","dir":"Articles","previous_headings":"","what":"Retrieve Observation Data","title":"CovidCAR Package Overview","text":"get_covid19_obs() function downloads hospital incidence data specified data range.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"the-source-options-for-data-to-be-retrieved","dir":"Articles","previous_headings":"Retrieve Observation Data","what":"The source options for data to be retrieved:","title":"CovidCAR Package Overview","text":"covidcast package local cache created covid19Forecasts package (.e., refactored pipeline pkg) test data available package (sample summer 2021) Add Spatial Index append_region_index() function matches location names observation data Region index polygon boundaries object, also corresponds adjaceny matrix. Region index added column observations new trn_tst column coded either trn tst nominal indicator distinguish time periods used model training (observed) testing (observed).","code":"MinDate = min(su_yaml$full_time_span) MaxDate = max(su_yaml$full_time_span)  testData = get_covid19_obs(source = \"covidcast\",                             start_date = MinDate, end_date = MaxDate,                             write_copy = TRUE) #testData = get_covid19_obs(source = \"cache\", start_date = MinDate, end_date = MaxDate) #testData = get_covid19_obs(source = \"test\", start_date = MinDate, end_date = MaxDate)  dim(testData) ## [1] 4534    5 head(testData) ##         date value signal location location_name ## 1 2021-06-28     2   hosp       02        Alaska ## 2 2021-06-28    29   hosp       01       Alabama ## 3 2021-06-28    55   hosp       05      Arkansas ## 4 2021-06-28    75   hosp       04       Arizona ## 5 2021-06-28   201   hosp       06    California ## 6 2021-06-28    60   hosp       08      Colorado train_data = append_region_index(train_data = testData, polys = States) which(is.na(train_data$Region)) ## integer(0)"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"forecast-template","dir":"Articles","previous_headings":"","what":"Forecast Template","title":"CovidCAR Package Overview","text":"create_forecast_template() function ensures location-time combination analysis represented data ingested model. case model runs using historic observations, function basically returns original input column names adjusted. full date range already represented. However, case future dates observations yet available, function add row day forecast horizon coding observed incidence value NA placeholder.","code":"train_data = create_forecast_template(train_data)"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"additional-covariates","dir":"Articles","previous_headings":"","what":"Additional Covariates","title":"CovidCAR Package Overview","text":"Demo models example fairly simple many cases users want add additional predictors, signals, covariates (independent variables). section script demonstrates (1) pull add demographic variables American Community Survey (ACS) (2) add Rt estimates generated EpiEstim package.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"demographic-data","dir":"Articles","previous_headings":"Additional Covariates","what":"Demographic Data","title":"CovidCAR Package Overview","text":"getPovertyPop() function provides wrapper function getCensus package loading American Community Survey (ACS) data U.S. Census Bureau. example, API key (‘secret_api’) used pull percent state’s total population poverty (SAEPOVRTALL_PT) number individuals age 55yrs (given vars_pop option).","code":"PovPop_data = getPovertyPop(key = get_api(\"censusapi\"), #function reads 'secrets.yaml' for specified name                             vars_pov = c(\"SAEPOVRTALL_PT\"),                              vars_pop = c('AGEGROUP','POP'),                              filt_age = c(12,18)) train_data = left_join(train_data, PovPop_data, by = \"location\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"rt-estimation","dir":"Articles","previous_headings":"Additional Covariates","what":"Rt Estimation","title":"CovidCAR Package Overview","text":"Rt_projection() function combines estimate_R() function EpiEstim package simple timeseries models forecast Rt estimated model training period across forecast horizon (28 days future). ‘raw’ Rt estimate (‘Rt_raw’) observation period forecast values (‘Rt’) added dataframe.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"forecast-models-include","dir":"Articles","previous_headings":"Additional Covariates > Rt Estimation","what":"Forecast models include:","title":"CovidCAR Package Overview","text":"simple ARIMA model using forecast package (method=“arima”) order-2 random walk noise trend using INLA package (method=“dlm) NOTE: experimental function “dlm” method used example. Models later demo use Rt_raw value forecast concurrently incidence estimation. Rt Estimates Checking Rt_projection() results","code":"Rt_df = Rt_projection(train_data, mean_si = 5.7, std_si = 2,                        forecast_horizon = 28, method = \"dlm\") Rt_df[1:10,] #check values ##          date value signal location location_name       day trn_tst Region ## 1  2021-06-28     2   hosp       02        Alaska    Monday   train     38 ## 2  2021-06-29     5   hosp       02        Alaska   Tuesday   train     38 ## 3  2021-06-30     2   hosp       02        Alaska Wednesday   train     38 ## 4  2021-07-01     6   hosp       02        Alaska  Thursday   train     38 ## 5  2021-07-02     3   hosp       02        Alaska    Friday   train     38 ## 6  2021-07-03     7   hosp       02        Alaska  Saturday   train     38 ## 7  2021-07-04     3   hosp       02        Alaska    Sunday   train     38 ## 8  2021-07-05     2   hosp       02        Alaska    Monday   train     38 ## 9  2021-07-06     5   hosp       02        Alaska   Tuesday   train     38 ## 10 2021-07-07     4   hosp       02        Alaska Wednesday   train     38 ##    SAEPOVRTALL_PT age_pop   Rt_raw       Rt ## 1             9.6  184927       NA       NA ## 2             9.6  184927       NA       NA ## 3             9.6  184927       NA       NA ## 4             9.6  184927       NA       NA ## 5             9.6  184927       NA       NA ## 6             9.6  184927       NA       NA ## 7             9.6  184927       NA       NA ## 8             9.6  184927 3.295300 3.272158 ## 9             9.6  184927 2.304267 2.334909 ## 10            9.6  184927 1.858476 1.848646 Rt_df %>%    filter(trn_tst == \"test\") %>%    slice(1:10) #check values (forecast period) ##          date value signal location location_name       day trn_tst Region ## 1  2021-08-24    15   hosp       02        Alaska   Tuesday    test     38 ## 2  2021-08-25    33   hosp       02        Alaska Wednesday    test     38 ## 3  2021-08-26    18   hosp       02        Alaska  Thursday    test     38 ## 4  2021-08-27    21   hosp       02        Alaska    Friday    test     38 ## 5  2021-08-28    14   hosp       02        Alaska  Saturday    test     38 ## 6  2021-08-29    19   hosp       02        Alaska    Sunday    test     38 ## 7  2021-08-30    32   hosp       02        Alaska    Monday    test     38 ## 8  2021-08-31    22   hosp       02        Alaska   Tuesday    test     38 ## 9  2021-09-01    22   hosp       02        Alaska Wednesday    test     38 ## 10 2021-09-02    23   hosp       02        Alaska  Thursday    test     38 ##    SAEPOVRTALL_PT age_pop Rt_raw       Rt ## 1             9.6  184927     NA 1.018212 ## 2             9.6  184927     NA 1.051603 ## 3             9.6  184927     NA 1.084992 ## 4             9.6  184927     NA 1.118382 ## 5             9.6  184927     NA 1.151771 ## 6             9.6  184927     NA 1.185161 ## 7             9.6  184927     NA 1.218551 ## 8             9.6  184927     NA 1.251941 ## 9             9.6  184927     NA 1.285331 ## 10            9.6  184927     NA 1.318721"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"organize-data","dir":"Articles","previous_headings":"","what":"Organize Data","title":"CovidCAR Package Overview","text":"Model parameters, inputs, covariates vary model--model user--user ultimately need combined single object can ingested inference software, INLA case. code modifies train_data dataframe perform desired scaling add several spatial temporal indices. Ordered integers used indices define timesteps (days, weeks, etc), locations (‘Region’), space*time combinations (e.g., ‘ID.Region.Wk’ next chunk). modeling approach hierarchical, indices may used multiple levels. , index name must unique therefore indices copied given slighly different names. data organized, reformatted list object called ‘datastack’ passed inference software. Although daraframe might intuitive, list object used model inputs can different lengths.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"clean-dataframe","dir":"Articles","previous_headings":"Organize Data","what":"Clean Dataframe","title":"CovidCAR Package Overview","text":"time_index() function used recode date vector desired timestep duration (2-day steps, 1 week steps, etc).","code":"train_data <- as.data.frame(Rt_df) %>%   mutate(     s_pop = log(age_pop), #log scale     s_pov = as.numeric(scale(SAEPOVRTALL_PT)), #some NAs present.       doy = as.integer(as.factor(date)),     doy.1 = doy,     Region.Wk = paste0(\"ID\", Region, \"W\", doy), #unique Region*doy combinations ('space-time interaction')     ID.Region.Wk = as.integer(as.factor(Region.Wk)), #convert factor levels to integer     week = week(date),     int_week.1 = as.integer(as.factor(week)),     int_week.2 = int_week.1,     int_week.3 = int_week.1,     threeday_indx = time_index(date, seq(min(date), max(date), by = \"3 days\")),     threeday_indx.1 = as.integer(as.factor(threeday_indx)),     fourday_indx = time_index(date, seq(min(date), max(date), by = \"4 days\")),     fourday_indx.1 = as.integer(as.factor(fourday_indx)),     fiveday_indx = time_index(date, seq(min(date), max(date), by = \"5 days\")),     fiveday_indx.1 = as.integer(as.factor(fiveday_indx)),     eightday_indx = time_index(date, seq(min(date), max(date), by = \"8 days\")),     eightday_indx.1 = as.integer(as.factor(eightday_indx)),     biweek_indx = time_index(date, seq(min(date), max(date), by = \"14 days\")),     biweek_indx.1 = as.integer(as.factor(biweek_indx)),     Region.1 = Region, Region.2 = Region, Region.3 = Region,                  Region.4 = Region, Region.5 = Region   ) %>%   select(c(-biweek_indx, threeday_indx, fourday_indx, fiveday_indx, eightday_indx))  head(train_data) ##         date value signal location location_name       day trn_tst Region ## 1 2021-06-28     2   hosp       02        Alaska    Monday   train     38 ## 2 2021-06-29     5   hosp       02        Alaska   Tuesday   train     38 ## 3 2021-06-30     2   hosp       02        Alaska Wednesday   train     38 ## 4 2021-07-01     6   hosp       02        Alaska  Thursday   train     38 ## 5 2021-07-02     3   hosp       02        Alaska    Friday   train     38 ## 6 2021-07-03     7   hosp       02        Alaska  Saturday   train     38 ##   SAEPOVRTALL_PT age_pop Rt_raw Rt    s_pop      s_pov doy doy.1 Region.Wk ## 1            9.6  184927     NA NA 12.12772 -0.8064822   1     1    ID38W1 ## 2            9.6  184927     NA NA 12.12772 -0.8064822   2     2    ID38W2 ## 3            9.6  184927     NA NA 12.12772 -0.8064822   3     3    ID38W3 ## 4            9.6  184927     NA NA 12.12772 -0.8064822   4     4    ID38W4 ## 5            9.6  184927     NA NA 12.12772 -0.8064822   5     5    ID38W5 ## 6            9.6  184927     NA NA 12.12772 -0.8064822   6     6    ID38W6 ##   ID.Region.Wk week int_week.1 int_week.2 int_week.3 threeday_indx ## 1         2466   26          1          1          1    2021-06-28 ## 2         2477   26          1          1          1    2021-06-28 ## 3         2488   26          1          1          1    2021-07-01 ## 4         2499   26          1          1          1    2021-07-01 ## 5         2510   27          2          2          2    2021-07-01 ## 6         2521   27          2          2          2    2021-07-04 ##   threeday_indx.1 fourday_indx fourday_indx.1 fiveday_indx fiveday_indx.1 ## 1               1   2021-06-28              1   2021-06-28              1 ## 2               1   2021-06-28              1   2021-06-28              1 ## 3               2   2021-06-28              1   2021-06-28              1 ## 4               2   2021-07-02              2   2021-07-03              2 ## 5               2   2021-07-02              2   2021-07-03              2 ## 6               3   2021-07-02              2   2021-07-03              2 ##   eightday_indx eightday_indx.1 biweek_indx.1 Region.1 Region.2 Region.3 ## 1    2021-06-28               1             1       38       38       38 ## 2    2021-06-28               1             1       38       38       38 ## 3    2021-06-28               1             1       38       38       38 ## 4    2021-06-28               1             1       38       38       38 ## 5    2021-06-28               1             1       38       38       38 ## 6    2021-07-06               2             1       38       38       38 ##   Region.4 Region.5 ## 1       38       38 ## 2       38       38 ## 3       38       38 ## 4       38       38 ## 5       38       38 ## 6       38       38"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"response-variable","dir":"Articles","previous_headings":"Organize Data","what":"Response Variable","title":"CovidCAR Package Overview","text":"response variable may differ models. case, copying hospital incidence (counts) new column, standardizing distribution, ensuring observations forecast horizon coded NA. Retaining scaling object rewriting function obs_scale() transform model outputs back observation scale later. , response variables specific individual model setup scaled differently fit different likelihood (Poisson, NegBinomial, etc). Keeping simple .","code":"train_data$resp = ifelse(train_data$trn_tst == \"train\", train_data$value, NA) #Set obs value to NA for forecasts periods  resp_scale_obj = scale(train_data$resp, scale=T, center=T) #scaled object obs_scale = function(r)r*attr(resp_scale_obj,'scaled:scale') + attr(resp_scale_obj, 'scaled:center') #transform back to observation scale  train_data$nrm_resp = as.numeric(resp_scale_obj)"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"format-as-a-datastack","dir":"Articles","previous_headings":"Organize Data","what":"Format as a Datastack","title":"CovidCAR Package Overview","text":"example, data remain dataframe passed INLA directly, matter practice, better format list object (datastack).","code":"nrm.lst = list(list(intercept1 = rep(1, dim(train_data)[1])), #custom intercept           list(pov_pct = train_data[,\"s_pov\"],                #desired covariates and indices below                pop = train_data[,\"s_pop\"],                    #formatting as nrm.lst = list()                Rt_raw = train_data[,\"Rt_raw\"],                Rt_raw.1 = train_data[,\"Rt_raw\"],                Rt = train_data[,\"Rt\"],                Rt.1 = train_data[,\"Rt\"],                doy = train_data[,\"doy\"],                doy.1 = train_data[,\"doy.1\"],                doy.2 = train_data[,\"doy.1\"],                int_week.1 = train_data[,\"int_week.1\"],                int_week.2 = train_data[,\"int_week.2\"],                int_week.3 = train_data[,\"int_week.3\"],                threeday_indx.1 = train_data[,\"threeday_indx.1\"],                fourday_indx.1 = train_data[,\"fourday_indx.1\"],                fiveday_indx.1 = train_data[,\"fiveday_indx.1\"],                eightday_indx.1 = train_data[,\"eightday_indx.1\"],                biwek_indx.1 = train_data[,\"biweek_indx.1\"],                Region.1 = train_data[,\"Region.1\"],                Region.2 = train_data[,\"Region.2\"],                Region.3 = train_data[,\"Region.3\"],                Region.4 = train_data[,\"Region.4\"],                Region.5 = train_data[,\"Region.5\"],                Region_Wk = train_data[,\"ID.Region.Wk\"],                dow = train_data[,\"day\"]))  nrm.stk = inla.stack(data = list(Y = train_data$nrm_resp), #Y is response variable                                       A = list(1,1),       #option to include matrices, not used in this case                                 effects = nrm.lst,         #list object from above                                     tag = \"nrm\")           #arbitrary name to index searches later                                                             #(multiple datastack used in complex models)"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"model-priors-and-formulae","dir":"Articles","previous_headings":"","what":"Model Priors and Formulae","title":"CovidCAR Package Overview","text":"Specifying priors formulas desired models using R-INLA syntax. deep-dive needed describe detail, time consuming workflow focused demonstration.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"a-few-notes","dir":"Articles","previous_headings":"Model Priors and Formulae","what":"A few notes:","title":"CovidCAR Package Overview","text":"pc refers “Penalizing Complexity” prec “precision” cor “correlation” non-PC priors coded using distribution name (e.g., norm = “normal”) Y response variable datastack f() designates function, level, submodel hierarchy hyper= refers prior f()","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"set-priors","dir":"Articles","previous_headings":"Model Priors and Formulae","what":"Set Priors","title":"CovidCAR Package Overview","text":"","code":"#bym prior bym_hyper <- list(phi = list(prior = \"pc\",                        param = c(0.5, 2/3),                        initial = 3),                 prec = list(prior = \"pc.prec\",                         param = c(1, 0.01),                         initial = 1.5))   #Normal prior norm.prior <- list(theta=list(prior = \"normal\",                                param=c(0, 1)))   #iid prior pc_prec_iid <- list(theta = list(prior=\"pc.prec\",                                   param=c(0.5, 0.01)))  #ar1 prior pc_cor_ar1 <- list(theta = list(prior = 'pccor1',                                  param = c(0.5, 0.9)))  #rw2 prior pc_rw2 <- list(prec=list(prior=\"pc.prec\",                           param=c(0.5,0.01)))  #bundle priors to archive run priors.list <- list() priors.list[[\"bym_hyper\"]] <- bym_hyper priors.list[[\"norm.prior\"]] <- norm.prior priors.list[[\"pc_prec_iid\"]] <- pc_prec_iid priors.list[[\"pc_cor_ar1\"]] <- pc_cor_ar1 priors.list[[\"pc_rw2\"]] <- pc_rw2"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"specify-formulas","dir":"Articles","previous_headings":"Model Priors and Formulae","what":"Specify Formulas","title":"CovidCAR Package Overview","text":"Formula 1: Random Walk plus noise location (.e., state) Formula 2: Random Walk plus noise trend location Formula 3: Common spatial effect timesteps location separate autoregression Formula 4: Separate spatial effect timestep (related ar1) location autoregressive term. Formula 5: Formula 4 space-time interaction capture location time specific variation outside modeled trends. Formula 6: Formula 5 adding covariate variation due day week (e.g. Monday, Tuesday,…Sunday). Formula 7: Including Rt estimates experimental covariate. Forecast Rt trend estimated observation period (training period) future (28 days) using autoregressive model. Formula 8: Formula 8 adding random walk coarse time scale (3 day steps) reduce forecast decay. Organize Formulas","code":"Frm.1 = Y ~ -1 +     #remove default intercept   intercept1 +       #custom intercept   f(doy.1,           #order by time index (daily)     constr=TRUE,     #enforced zero mean     model=\"rw1\",     #order-1 random walk with noise     scale.model = TRUE, #additional internal scaling     group = Region.1, #run rw1 model for groups based on location      control.group=list(model=\"iid\"), #groups are treated independently     hyper=pc_rw2)  #prior for rw2 Frm.2 = Y ~ -1 +        intercept1 +          f(doy.1,                constr=TRUE,          model=\"rw1\",         scale.model = TRUE,      group = Region.1,      control.group=list(model=\"iid\"),      hyper=pc_rw2) +    f(doy.2, model=\"linear\", mean.linear = 0, prec.linear = 0.001) #add linear trend to rw1 Frm.3 = Y ~ -1 +       intercept1 +          f(Region.1,        #location index     model=\"bym2\",    #spatial effect, Besag-York-Mollie model (the 2 indicates scaling)      graph=J,         #Adjacency graph to identify neighbors     constr=TRUE,     #enforced zero mean     hyper=bym_hyper) + #BYM prior   f(doy.1,             #order by time index (daily)     model=\"ar1\",       #apply order-1 autoregressive     constr=TRUE,     group = Region.1,  #run ar1 model for groups based on location     control.group=list(model=\"iid\"), #groups are treated independently     hyper=pc_cor_ar1) Frm.4 = Y ~ -1 +        intercept1 +          f(Region.1,             model=\"bym2\",        graph=J,              constr=TRUE,          group = doy,     #time index, daily (create separate realizations of spatial covariate for each day)     control.group=list(model=\"ar1\"), #groups are related via an order-1 autoregressive     hyper=bym_hyper) + #prior for BYM   f(doy.1,                  model=\"ar1\",            constr=TRUE,     group = Region.1,       control.group=list(model=\"iid\"),      hyper=pc_cor_ar1) Frm.5 = Y ~ -1 +       intercept1 +          f(Region.1,             model=\"bym2\",         graph=J,              constr=TRUE,         group = doy,          control.group=list(model=\"ar1\"),     hyper=bym_hyper) +   f(doy.1,                  model=\"ar1\",            constr=TRUE,     group = Region.1,       control.group=list(model=\"iid\"),      hyper=pc_cor_ar1) +   f(Region_Wk,   #Index for all location*time combinations (space-time interaction)     model=\"iid\", #each location and time combination considered independently     constr=TRUE,     hyper=pc_prec_iid) Frm.6 = Y ~ -1 +       intercept1 +          f(Region.1,             model=\"bym2\",         graph=J,              constr=TRUE,          group = doy,          hyper=bym_hyper,      control.group=list(model=\"ar1\")) +   f(doy.1,                  model=\"ar1\",            constr=TRUE,     group = Region.1,       control.group=list(model=\"iid\"),      hyper=pc_cor_ar1) +   f(dow,           #discrete variable indicating day of week, e.g. Monday, Tuesday,...Sunday     constr=TRUE,     model=\"iid\",   #days of week may vary independently     group = Region.2, #variation attributed to days of week may differ by location     control.group=list(model=\"iid\"),      hyper=pc_prec_iid) +   f(Region_Wk,        model=\"iid\",      constr=TRUE,     hyper=pc_prec_iid) Frm.7 = Y ~ -1 +        intercept1 +          pov_pct + pop +       f(Region.1,             model=\"bym2\",         graph=J,             constr=TRUE,          group = doy,          hyper=bym_hyper,      control.group=list(model=\"ar1\")) +    f(doy.1, Rt_raw,  #order by time index (daily) but weight each timestep by corresponding Rt_raw estimate     model=\"ar1\",    #apply order-1 autoregressive to Rt weighted time index above     constr=TRUE,     group = Region.2,      control.group=list(model=\"iid\"),     hyper=pc_cor_ar1) +   f(dow,                constr=TRUE,     model=\"iid\",     group = Region.3,     control.group=list(model=\"iid\"),     hyper=pc_prec_iid) +   f(Region_Wk,        model=\"iid\",      constr=TRUE,     hyper=pc_prec_iid) Frm.8 = Y ~ -1 +        intercept1 +          pov_pct + pop +    #linear covariates for poverty and population over 55yrs   f(Region.1,             model=\"bym2\",         graph=J,             constr=TRUE,          group = doy,         hyper=bym_hyper,      control.group=list(model=\"ar1\")) +    f(threeday_indx.1, #time index, 3days     constr=TRUE,     model=\"rw2\",     #order-2 random walk with noise     scale.model = TRUE,     group = Region.2,     control.group=list(model=\"iid\"),      hyper=pc_rw2) +    f(doy.1, Rt_raw,       model=\"ar1\",         constr=TRUE,     group = Region.3,      control.group=list(model=\"iid\"),     hyper=pc_cor_ar1) +   f(dow,                constr=TRUE,     model=\"iid\",     group = Region.4,     control.group=list(model=\"iid\"),     hyper=pc_prec_iid) +   f(Region_Wk,        model=\"iid\",      constr=TRUE,     hyper=pc_prec_iid) formulas.list <- list() formulas.list[[\"base_rw1\"]] <- Frm.1 formulas.list[[\"rw1_trend\"]] <- Frm.2 formulas.list[[\"base_car\"]] <- Frm.3 formulas.list[[\"car_time\"]] <- Frm.4 formulas.list[[\"car_sti\"]] <- Frm.5 formulas.list[[\"car_wdays\"]] <- Frm.6 formulas.list[[\"car_rt\"]] <- Frm.7 formulas.list[[\"car_full\"]] <- Frm.8"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"run-models","dir":"Articles","previous_headings":"","what":"Run Models","title":"CovidCAR Package Overview","text":"run_model_list() function runs series models specified formulas.list using input data organized datastack (nrm.srk). function runs model sequentially writes executed models (models_out), formulas (formulas.list), priors (prior.list), datastack, original dataframe (train_data) .RData analysis directory. models_out object also available environment processing. many customization options inference opted keep run_model_list() fairly simple ease use maximum efficiency.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"addional-run_model_list-options","dir":"Articles","previous_headings":"Run Models","what":"Addional run_model_list() options:","title":"CovidCAR Package Overview","text":"one likelihood provided applied models vector likelihoods can provided order based formulas.list e.g., myFamilies <- c(“gaussian”, “binomial”, “zeroinflatednbinomial”, …) indicates latencies (GMRF) retained sampling config=TRUE can time intensive dramatically slow model runs CovidCAR post_sampling() function facilitate sampling verbose prints INLA algorithm process screen model runs model outputs written run_archive subdirectory","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"run-all-models","dir":"Articles","previous_headings":"Run Models","what":"Run All Models","title":"CovidCAR Package Overview","text":"","code":"formulas.list = formulas.list[c(1:4)] #short list for demo, fast run models  models_out = run_model_list(formulas.list=formulas.list,                             dataStack=nrm.stk,                             likelihood = \"gaussian\",                             config=FALSE, verbose = FALSE, archive=TRUE)"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"extract-and-format-forecasts","dir":"Articles","previous_headings":"","what":"Extract and Format Forecasts","title":"CovidCAR Package Overview","text":"extract_forecasts() function pulls forecasts models saves forecasts folder analysis directory. function returns forecast_paths list object environment file path names. Forecasts formatted specifications required submission covid19-forecast-hub. View forecasts extract_forecasts() also returns list (‘plot_paths’) paths plotting data extraction process. data can accessed plot_location() function, provides quick diagnostic plot forecast specific location. Note Caution: ‘loc=’ option left NULL, locations plotted PDF file saved ‘Reports’ folder analysis directory. may time consuming!","code":"#models_out[[\"full_mod\"]] <- full_model extract_forecasts(mod_out=models_out,                   dataStack=nrm.stk, train_data=train_data,                   team = \"CFA\") ##   [36mℹ [39m Writing model forecasts to analysis directory:    [32m✔ [39m base_rw1  [38;5;249m[1.1s] [39m                                 ##   [36mℹ [39m Writing model forecasts to analysis directory:    [32m✔ [39m rw1_trend  [38;5;249m[1.1s] [39m                                ##   [36mℹ [39m Writing model forecasts to analysis directory:    [32m✔ [39m base_car  [38;5;249m[1.4s] [39m                                 ##   [36mℹ [39m Writing model forecasts to analysis directory:    [32m✔ [39m car_time  [38;5;249m[2.7s] [39m #check returned object names(forecast_paths) ## [1] \"base_rw1\"  \"rw1_trend\" \"base_car\"  \"car_time\" head(read.csv(forecast_paths[[\"rw1_trend\"]])) #formatted for submission ##   forecast_date location               target target_end_date     type quantile ## 1    2021-08-23       02 0 day ahead inc hosp      2021-08-23 quantile     0.01 ## 2    2021-08-23       02 1 day ahead inc hosp      2021-08-24 quantile     0.01 ## 3    2021-08-23       02 2 day ahead inc hosp      2021-08-25 quantile     0.01 ## 4    2021-08-23       02 3 day ahead inc hosp      2021-08-26 quantile     0.01 ## 5    2021-08-23       02 4 day ahead inc hosp      2021-08-27 quantile     0.01 ## 6    2021-08-23       02 5 day ahead inc hosp      2021-08-28 quantile     0.01 ##      value ## 1 18.04309 ## 2  0.00000 ## 3  0.00000 ## 4 15.69078 ## 5 47.97832 ## 6 83.44559 OK_plot = plot_location(plot_path = plot_paths, model = \"base_car\", loc = \"Oklahoma\") OK_plot AR_plot = plot_location(plot_path = plot_paths, model = \"base_car\", loc = \"Arkansas\") AR_plot #plot_location(plot_path = plot_paths, model = \"base_car\") #plots and saves all locations to a pdf file"},{"path":[]},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"wis-scores","dir":"Articles","previous_headings":"Model Scoring","what":"WIS Scores","title":"CovidCAR Package Overview","text":"score_WIS() function calculates WIS score forecasts model. Optional arguments can included indicate files read directory (ingest = “path”), dataframe environment (ingest = “dataframe”),list object individual file paths (ingest = “list”) returned extract_forecasts(). ‘missing’ option can used specify missing observation data handled; ‘remove’ data fill ‘zero’. Diagnostic score plots plot_WIS_lines() function options make quick plots WIS scores returned score_WIS().","code":"my_truth <- train_data %>% #Caution: my_truth may be different than your truth :)   select(date, location, value)  my_scores <- score_WIS(forecast_data = forecast_paths, truth=my_truth,                         ingest = \"list\", missing = \"remove\") ## → A total of 2668 predictions weren't evalauted due lack of truth data head(my_scores) ##      model       date location_name forecast_date       WIS ## 1 base_car 2021-08-23            01    2021-08-23 0.5998546 ## 2 base_car 2021-08-23            02    2021-08-23 0.5645330 ## 3 base_car 2021-08-23            04    2021-08-23 0.5753993 ## 4 base_car 2021-08-23            05    2021-08-23 0.6124703 ## 5 base_car 2021-08-23            06    2021-08-23 0.6039834 ## 6 base_car 2021-08-23            08    2021-08-23 0.5703260 #overall wis_rank <- my_scores %>%   group_by(model) %>%   summarise(mean_wis = mean(WIS)) %>%   arrange(mean_wis) %>%   mutate(wisRank = row_number())  wis_rank #mean absolute values ## # A tibble: 4 × 3 ##   model     mean_wis wisRank ##   <chr>        <dbl>   <int> ## 1 car_time      34.6       1 ## 2 base_car      34.7       2 ## 3 base_rw1     281.        3 ## 4 rw1_trend    307.        4 unique(my_scores$model) ## [1] \"base_car\"  \"base_rw1\"  \"car_time\"  \"rw1_trend\" #lines showing absolute WIS plot_WIS_lines(my_scores, by = \"date\", range = \"abs\") #lines showing scaled WIS plot_WIS_lines(my_scores, by = \"date\", range = \"scaled\",                 scale_model = \"base_rw1\") #optional 'limit' that recodes: (WIS >= limit) -> limit plot_WIS_lines(my_scores, by = \"date\", range = \"scaled\",                 scale_model = \"base_rw1\", limit = 2) #tile option plot_WIS_lines(my_scores, by = \"tile\", range = \"scaled\",                 scale_model = \"base_rw1\", limit = 2) ## Warning: Removed 432 rows containing missing values (`geom_tile()`)."},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"mean-absolute-error-mae","dir":"Articles","previous_headings":"Model Scoring","what":"Mean Absolute Error (MAE)","title":"CovidCAR Package Overview","text":"score_MAE() function works comparably score_WIS() simpler measure model performance based point estimates forecasts.","code":"my_mae <- score_MAE(forecast_data = forecast_paths, truth=my_truth, ingest = \"list\", missing = \"remove\") ## → A total of 116 forecasts weren't evaluatd due lack of truth data my_mae ##       model   MAE    MAPE maeRank ## 1  base_car  41.5 0.01251       1 ## 2  car_time  41.8 0.01261       2 ## 3  base_rw1 325.6 0.09818       3 ## 4 rw1_trend 353.3 0.10652       4"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"ensemble","dir":"Articles","previous_headings":"","what":"Ensemble","title":"CovidCAR Package Overview","text":"propose_weights() function assists ensemble building weighting models using given performance metric. function scales raw model comparison metric builds ensemble multiplying forecasts model-specific weight summing across included models. resulting ensemble forecast standardized Covid19-hub submission written analysis directory (./forecasts). function returns estimated weights environment. example, WIS MAE scores used weight individual models ensemble. First, compare WIS MAE scores: propose_weights() function can applied generate weights write resulting ensemble.","code":"mod_rank <- left_join(my_mae, wis_rank, by=\"model\") #combine with overall WIS  mod_rank #note the scores rank models differently ##       model   MAE    MAPE maeRank  mean_wis wisRank ## 1  base_car  41.5 0.01251       1  34.72064       2 ## 2  car_time  41.8 0.01261       2  34.56927       1 ## 3  base_rw1 325.6 0.09818       3 280.86038       3 ## 4 rw1_trend 353.3 0.10652       4 307.10300       4 my_wis_weights <- propose_weights(forecast_data = forecast_paths, #standardized model forecasts                              ingest = \"list\",                     #read model locations as list                              rank_df = mod_rank,                  #use the data from WIS and MAE scoring                                       rankCol = \"mean_wis\",                #weight models based on this column                              team = \"CFA\",                        #team name (need be in file name per Covid19hub)                              mod_name = \"wis_ensemble\")           #label for the new ensemble forecast ## → Writing ensemble 'wis_ensemble' to analysis directory my_wis_weights #The weights column reports the actual weights calculated for each model ##       model   MAE    MAPE maeRank  mean_wis wisRank mean_wis_weights ## 1  base_car  41.5 0.01251       1  34.72064       2        0.3157244 ## 2  car_time  41.8 0.01261       2  34.56927       1        0.3158011 ## 3  base_rw1 325.6 0.09818       3 280.86038       3        0.1908919 ## 4 rw1_trend 353.3 0.10652       4 307.10300       4        0.1775826 #another example,this time using MAE and including a 'drop' option my_mae_weights <- propose_weights(forecast_data = forecast_paths,                               ingest = \"list\",                              rank_df = mod_rank,                               rankCol = \"MAE\",                              drop = 1,  #number of lowest ranked models to drop/exclude from ensemble                              team = \"CFA\",                              mod_name = \"mae_ensemble\") ## → Dropped models: rw1_trend ## → Writing ensemble 'mae_ensemble' to analysis directory my_mae_weights ##      model   MAE    MAPE maeRank  mean_wis wisRank MAE_weights ## 1 base_car  41.5 0.01251       1  34.72064       2   0.4492541 ## 2 car_time  41.8 0.01261       2  34.56927       1   0.4488873 ## 3 base_rw1 325.6 0.09818       3 280.86038       3   0.1018586 #yet another example, not providing a rankCol -> function assumes equal weighting  equal_mae_weights <- propose_weights(forecast_data = forecast_paths,                               ingest = \"list\",                              rank_df = mod_rank,                               #rankCol = NULL,                              drop = 1,  #issues warning, dropping models without a ranking criteria                              team = \"CFA\",                              mod_name = \"equal_mae_ensemble\") ## ✖ No rankCol but dropping models? Models will be dropped from end of list! ## ! No rankCol provided, ensemble assumes equal weighting ## → Dropped models: rw1_trend ## → Writing ensemble 'equal_mae_ensemble' to analysis directory equal_mae_weights ##      model   MAE    MAPE maeRank  mean_wis wisRank rankCol rankCol_weights ## 1 base_car  41.5 0.01251       1  34.72064       2       1       0.3333333 ## 2 car_time  41.8 0.01261       2  34.56927       1       1       0.3333333 ## 3 base_rw1 325.6 0.09818       3 280.86038       3       1       0.3333333"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"ensemble-re-scoring","dir":"Articles","previous_headings":"Ensemble","what":"Ensemble Re-scoring","title":"CovidCAR Package Overview","text":"Now new ensembles added ‘forecasts’ directory, comparison scores can recalculated.","code":"myDir <- file.path(su_yaml$out_dir_name, \"forecasts\") new_mae <- score_MAE(forecast_data = myDir, truth=my_truth, ingest = \"path\", missing = \"remove\") ## → A total of 203 forecasts weren't evaluatd due lack of truth data new_mae ##                model   MAE    MAPE maeRank ## 1           base_car  41.5 0.01251       1 ## 2           car_time  41.8 0.01261       2 ## 3       mae_ensemble  51.2 0.01544       3 ## 4 equal_mae_ensemble 105.5 0.03181       4 ## 5       wis_ensemble 120.7 0.03640       5 ## 6           base_rw1 325.6 0.09818       6 ## 7          rw1_trend 353.3 0.10652       7"},{"path":"https://jmhumphreys.github.io/CovidCAR/articles/introduction.html","id":"historic-forecasts","dir":"Articles","previous_headings":"Ensemble","what":"Historic Forecasts","title":"CovidCAR Package Overview","text":"get_hub_forecasts() function retrieves forecasts previously submitted covid19-forecast-hub. Similar get_covid19_obs(), options load local parquet cache (source=“cache”) indexed Covid19Forecasts package(private repo) load “test” data included package. also option use covidHubUtils package download data directly covid19-forecast-hub. queried results can also filtered specific models using ‘models=’ option. set, ‘model=’ options defaults forecasts COVIDhub-trained_ensemble, COVIDhub-ensemble, COVIDhub-baseline models. default, get_hub_forecasts() returns forecasts forecast period specified initial setup using setup_analysis(). Combine CovidCAR models plot_forecasts_compare() function combines plot_WIS_lines() score_WIS() make model WIS comparison line plot. ‘hub_forecasts’ option facilitates direct use imported historical forecast data Covid19-forecast-hub.","code":"hist_forecasts <- get_hub_forecasts(source = \"covidHubUtils\",                                     models = c(\"COVIDhub-trained_ensemble\", \"COVIDhub-baseline\", \"COVIDhub-ensemble\"),                                     write_copy = TRUE) ## → Loading location crosswalk ## Rows: 57 Columns: 4 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \"|\" ## chr (4): STATE, STUSAB, STATE_NAME, STATENS ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## → Fetching COVID-19 forecasts using covidHubUtils ##  ## get_token(): POST: https://zoltardata.com/api-token-auth/ ##  ## get_resource(): GET: https://zoltardata.com/api/projects/ ##  ## get_resource(): GET: https://zoltardata.com/api/project/44/models/ ##  ## get_resource(): GET: https://zoltardata.com/api/project/44/timezeros/ ##  ## → Writing forecast data to analysis directory dim(hist_forecasts) ## [1] 103032      7 head(hist_forecasts) ##                       model forecast_date location target_end_date     type ## 1 COVIDhub-trained_ensemble    2021-08-23       01      2021-08-24    point ## 2 COVIDhub-trained_ensemble    2021-08-23       01      2021-08-24 quantile ## 3 COVIDhub-trained_ensemble    2021-08-23       01      2021-08-24 quantile ## 4 COVIDhub-trained_ensemble    2021-08-23       01      2021-08-24 quantile ## 5 COVIDhub-trained_ensemble    2021-08-23       01      2021-08-24 quantile ## 6 COVIDhub-trained_ensemble    2021-08-23       01      2021-08-24 quantile ##   quantile value ## 1       NA   495 ## 2    0.010   369 ## 3    0.025   384 ## 4    0.050   395 ## 5    0.100   404 ## 6    0.150   412 #because data is formatted to same standard, functions can read hub_rank <- score_WIS(forecast_data = hist_forecasts, truth=my_truth,                        ingest = \"dataframe\", missing = \"remove\")  hub_rank %>%   group_by(model) %>%   summarise(mean_wis = mean(WIS)) ## # A tibble: 3 × 2 ##   model                     mean_wis ##   <chr>                        <dbl> ## 1 COVIDhub-baseline             45.6 ## 2 COVIDhub-ensemble             50.6 ## 3 COVIDhub-trained_ensemble     68.2 my_plot <- plot_forecasts_compare(forecast_data = myDir, truth=my_truth, ingest = \"path\",                                   hub_forecasts = hist_forecasts, #historic forecasts                                   scale_model = \"COVIDhub-baseline\",                                   limit = 4,                                   missing = \"remove\",                                   write_copy = TRUE) ## → A total of 4669 predictions weren't evalauted due lack of truth data ## → Writing comparison scores to analysis directory class(my_plot) ## [1] \"gg\"     \"ggplot\" my_plot"},{"path":"https://jmhumphreys.github.io/CovidCAR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Humphreys. Author, maintainer.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Humphreys John, (2023). CovidCAR: Conditional Autoregressive Models Forecasting US Covid19 Hospital Incidence. R package version 0.1.0, https://jmhumphreys.github.io/CovidCAR/","code":"@Manual{,   title = {{CovidCAR}: Conditional Autoregressive Models for Forecasting US Covid19 Hospital Incidence},   author = {John Humphreys},   year = {2023},   note = {R package version 0.1.0},   url = {https://jmhumphreys.github.io/CovidCAR/}, }"},{"path":"https://jmhumphreys.github.io/CovidCAR/index.html","id":"covidcar","dir":"","previous_headings":"","what":"Conditional Autoregressive Models for Forecasting US Covid19 Hospital Incidence","title":"Conditional Autoregressive Models for Forecasting US Covid19 Hospital Incidence","text":"CovidCAR r-package forecast US Covid19 Hospital Incidence using Conditional AutoRegressive Models. package provides functions facilitate data pre-processing, Conditional Autoregressive (CAR) model construction, model evaluation, ensembling, formatting model results submission covid19-forecast-hub.","code":"devtools::install_github(\"JMHumphreys/CovidCAR\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Conditional Autoregressive Models for Forecasting US Covid19 Hospital Incidence","text":"CovidCAR WebsiteCovidCAR Functions (Reference)Introduction Overview (Articles)","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"function extracts region data location given shapefile. also adds additional columns day week training testing data flag.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"","code":"append_region_index(train_data, polys)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"train_data data frame containing training data. polys Shapefile object containing state boundaries regions.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"Returns modified train_data dataframe new columns: day, trn_tst, Region.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"","code":"append_region_index(train_df, states_sf, as.Date(\"2020-12-31\")) #> Error in append_region_index(train_df, states_sf, as.Date(\"2020-12-31\")): unused argument (as.Date(\"2020-12-31\"))"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/cast_date_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Date String to Date Object — cast_date_string","title":"Convert Date String to Date Object — cast_date_string","text":"Takes date string YYYY-MM-DD format returns date object, null replacement value input null.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/cast_date_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Date String to Date Object — cast_date_string","text":"","code":"cast_date_string(x, null_replacement_value)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/cast_date_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Date String to Date Object — cast_date_string","text":"x Date string YYYY-MM-DD format null_replacement_value Value return input null","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/cast_date_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Date String to Date Object — cast_date_string","text":"date object representing input string","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/cast_date_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Date String to Date Object — cast_date_string","text":"","code":"cast_date_string(\"2022-03-02\", \"No date\") #> Error in ymd(x, quiet = TRUE): could not find function \"ymd\" cast_date_string(NULL, \"No date\") #> [1] \"No date\""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Forecast Template — create_forecast_template","title":"Create a Forecast Template — create_forecast_template","text":"function creates forecast template given dataset output includes unique locations input data specified forecast horizon.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Forecast Template — create_forecast_template","text":"","code":"create_forecast_template(train_data)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Forecast Template — create_forecast_template","text":"train_data Input data used create forecast template.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Forecast Template — create_forecast_template","text":"Returns data frame containing forecast template. output following columns: location, date, value, signal, day, trn_tst. row output dataframe contain unique location input dataset, dates ranging forecast_horiz_start forecast_horiz_end. values value column left NA. signal column set \"hosp\" indicating hospital data. day column specifies weekday corresponding date. trn_tst column indicates whether observation part training test dataset. forecast template, rows \"test\". final output contains distinct observations respect columns date location. Additionally, dataset returned function contains additional column named 'Region' joined original input data.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Forecast Template — create_forecast_template","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union # create sample data date_data <- seq(as.Date(\"2021-01-01\"), as.Date(\"2021-01-31\"), by = \"day\") loc_data <- c('loc1', 'loc2') val_data <- c(1, 2) hosp_data <- rep('hosp', length(date_data)) day_data <- weekdays(date_data) trn_tst_data <- 'train' data <- data.frame(date = rep(date_data, length(loc_data)),                    location = rep(loc_data, each = length(date_data)),                    value = rep(val_data, each = length(date_data)),                    signal = hosp_data,                    day = rep(day_data, length(loc_data)),                    trn_tst = trn_tst_data)  create_forecast_template(data, as.Date(\"2021-02-01\"), as.Date(\"2021-02-10\")) #> Error in create_forecast_template(data, as.Date(\"2021-02-01\"), as.Date(\"2021-02-10\")): unused arguments (as.Date(\"2021-02-01\"), as.Date(\"2021-02-10\"))"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Download US Boundaries — download_boundaries","title":"Download US Boundaries — download_boundaries","text":"Downloads extracts shapefiles either US states counties. creates directory specified location one exist already. function downloads shapefile specified URL, unzips , reads object class 'sf', changes projection \"EPSG:5070\", fixes topology, matches state name observation data assigns unique identifiers.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download US Boundaries — download_boundaries","text":"","code":"download_boundaries(unit = \"state\", proj = \"EPSG:5070\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download US Boundaries — download_boundaries","text":"unit character string indicating whether download state county borders, default \"state\". proj Projection shapefiles, defaults \"EPSG:5070\".","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download US Boundaries — download_boundaries","text":"object class 'SpatialPolygonsDataFrame' contains state county border polygons associated attributes.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download US Boundaries — download_boundaries","text":"","code":"#Download state boundaries to a directory called 'States': download_boundaries(\"./States\") #> Error in paste0(su_yaml$out_dir_name, \"/polygons\"): object 'su_yaml' not found  #Download county boundaries to a directory called 'Counties': download_boundaries(\"./Counties\", unit = \"county\") #> Error in paste0(su_yaml$out_dir_name, \"/polygons\"): object 'su_yaml' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/extract_forecasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract forecasts from a model — extract_forecasts","title":"Extract forecasts from a model — extract_forecasts","text":"function extracts forecasts INLA model object formats data submission Covid19-forecast-hub (https://github.com/reichlab/covid19-forecast-hub).","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/extract_forecasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract forecasts from a model — extract_forecasts","text":"","code":"extract_forecasts(mod_out, dataStack, train_data, team = \"TeamName\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/extract_forecasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract forecasts from a model — extract_forecasts","text":"mod_out fitted model object train_data training data used fit model nrm.stk object class 'inla.stack'","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/extract_forecasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract forecasts from a model — extract_forecasts","text":"data frame columns forecast date, location, target, target end date, type value (quantile point), quantile value (applicable), forecast value required submission Covid19-forecast-hub.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast Time Series — forecast_time_series","title":"Forecast Time Series — forecast_time_series","text":"function takes time series data generates forecast specified number periods. function fits ARIMA model data uses generate forecast. data clear seasonal pattern, function fits seasonal ARIMA model. function returns two lists: obs_fitted (fitted values observation period) pred_trend (predicted trend forecast horizon).","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast Time Series — forecast_time_series","text":"","code":"forecast_time_series(ts_data, forecast_horizon, season_period = NULL)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast Time Series — forecast_time_series","text":"ts_data time series object numeric vector forecast_horizon positive integer specifying number periods forecast season_period optional parameter specifying seasonal period time series","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast Time Series — forecast_time_series","text":"list containing observations predicted trend forecast horizon","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecast Time Series — forecast_time_series","text":"","code":"# generate a time series data ts_data <- ts(rnorm(100), frequency = 12, start = c(2014, 1)) # generate a forecast for next 6 periods using auto.arima() with default settings forecast_time_series(ts_data, 6) #> Error in forecast_time_series(ts_data, 6): object 'su_yaml' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"function retrieves poverty data population data grouped age Census API, filters data processes return merged dataframe relevant information.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"","code":"getPovertyPop(key, vars_pov, vars_pop, filt_age)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"key character string containing valid value user's Census API key. vars_pov character vector specifies variables retrieved poverty data. vars_pop character vector specifies variables retrieved population data. filt_age integer vector length two specifying minimum maximum age group filter population data.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"merged dataframe poverty population count state.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"","code":"data <- getPovertyPop(\"my_census_key\", c(\"SAEMHI_PT\"), c(\"POP\"), c(12, 18)) #> Error in getCensus(name = \"timeseries/poverty/saipe\", key = key, vars = vars_pov,     region = \"state:*\", time = \"2020\"): could not find function \"getCensus\""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Get API key from secrets.yaml file — get_api","title":"Get API key from secrets.yaml file — get_api","text":"function retrieves API key reading secrets.yaml file stored current working directory. specified 'api_name' used retrieve corresponding API key.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get API key from secrets.yaml file — get_api","text":"","code":"get_api(api_name)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get API key from secrets.yaml file — get_api","text":"api_name character string representing name API key retrieved secrets.yaml file.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get API key from secrets.yaml file — get_api","text":"character vector containing value requested API key.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get API key from secrets.yaml file — get_api","text":"","code":"#Read API token for Twitter API from secrets.yaml get_api(\"Twitter_API\") #> Warning: cannot open file 'D:/Github/CovidCAR/docs/reference/secrets.yaml': No such file or directory #> Error in file(file, \"rt\", encoding = fileEncoding): cannot open the connection  #Read API token for OpenWeather API from secrets.yaml get_api(\"OpenWeather_API\") #> Warning: cannot open file 'D:/Github/CovidCAR/docs/reference/secrets.yaml': No such file or directory #> Error in file(file, \"rt\", encoding = fileEncoding): cannot open the connection"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain COVID-19 Observation Data — get_covid19_obs","title":"Obtain COVID-19 Observation Data — get_covid19_obs","text":"function obtains COVID-19 observation data based chosen source.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain COVID-19 Observation Data — get_covid19_obs","text":"","code":"get_covid19_obs(   source = c(\"covidcast\", \"cache\", \"test\"),   start_date,   end_date,   write_copy = TRUE )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain COVID-19 Observation Data — get_covid19_obs","text":"source character string indicating source data obtained. Allowed values \"covidcast\" (fetch data using covidcast), \"cache\" (read data local cache) \"test\" (load test data). start_date character string indicating start date period data needed. date format \"YYYY-MM-DD\". end_date character string indicating end date period data needed. date format \"YYYY-MM-DD\". write_copy logical value indicating whether data obtained written file . default value TRUE.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain COVID-19 Observation Data — get_covid19_obs","text":"Returns data frame containing COVID-19 observation data based chosen source.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain COVID-19 Observation Data — get_covid19_obs","text":"source = \"covidcast\", function fetches COVID-19 observation data using covidcast package. source = \"cache\", function reads COVID-19 observation data local cache. source = \"test\", function loads test data period 2021-06-28 2021-09-20. function also loads state crosswalk data performs date checks data filtering based selected source. write_copy = TRUE, data obtained written .csv file newly created directory named \"observations\" within analysis directory.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_hub_forecasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get COVID-19 forecasts from various sources — get_hub_forecasts","title":"Get COVID-19 forecasts from various sources — get_hub_forecasts","text":"function allows obtain COVID-19 forecasts based selected data source. data can come covidHubUtils, cache test depending preference.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_hub_forecasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get COVID-19 forecasts from various sources — get_hub_forecasts","text":"","code":"get_hub_forecasts(   source = c(\"covidHubUtils\", \"cache\", \"test\"),   models = NULL,   write_copy = TRUE )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_hub_forecasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get COVID-19 forecasts from various sources — get_hub_forecasts","text":"source character vector specify forecast data obtained (default 'covidHubUtils'). Accepted values include \"covidHubUtils\" fetching data online, \"cache\" reading saved data local cache, \"test\" loading test data locally. models character vector models included query. Default NULL includes COVIDhub-trained_ensemble, COVIDhub-ensemble, COVIDhub-baseline. write_copy logical value indicating copy downloaded data written analysis directory. Default TRUE.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_hub_forecasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get COVID-19 forecasts from various sources — get_hub_forecasts","text":"Returns dataframe containing COVID-19 forecasts columns model name, forecast date, location, target end date, type, quantile, value.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_hub_forecasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get COVID-19 forecasts from various sources — get_hub_forecasts","text":"","code":"#get Hub forecasts using default arguments: get_hub_forecasts() #> Error in get_hub_forecasts(): object 'su_yaml' not found  #get Hub forecasts specifying model(s): get_hub_forecasts(models = c(\"COVIDhub-ensemble\")) #> Error in get_hub_forecasts(models = c(\"COVIDhub-ensemble\")): object 'su_yaml' not found  #read saved data from cache: get_hub_forecasts(source = \"cache\") #> Error in get_hub_forecasts(source = \"cache\"): object 'su_yaml' not found  #load test data: get_hub_forecasts(source = \"test\") #> Error in get_hub_forecasts(source = \"test\"): object 'su_yaml' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the model name from a filename — get_model_name","title":"Get the model name from a filename — get_model_name","text":"function takes filename .csv format returns model name. function removes \".csv\" extension, finds last occurrence \"-\" filename, removes text preceding last dash (including dash ).","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the model name from a filename — get_model_name","text":"","code":"get_model_name(filename)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the model name from a filename — get_model_name","text":"filename character string representing filename.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the model name from a filename — get_model_name","text":"character string representing model name.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the model name from a filename — get_model_name","text":"","code":"get_model_name(\"model-1.csv\") #> [1] \"1\""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Neighbors of Polygons — get_neighbors","title":"Get Neighbors of Polygons — get_neighbors","text":"function takes set polygons calculates neighbors based either polygon adjacency polygon distance centroid.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Neighbors of Polygons — get_neighbors","text":"","code":"get_neighbors(polys, distance = \"centroid\", connect = TRUE)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Neighbors of Polygons — get_neighbors","text":"polys SpatialPolygons object containing polygons calculate neighbourhoods. distance method calculate distances polygons. Set \"centroid\" (default) use distance centroids polygons, \"polygon\" measure distances polygons . connect Logical. Whether create neighborhood list based polygon adjacency (TRUE) polygon connectivity (FALSE).","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Neighbors of Polygons — get_neighbors","text":"'neighbours' object created using 'poly2nb' function spdep package. neighbours object list integer vectors, one vector per spatial unit (polygon), describing indices polys object define neighbouring spatial units.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Neighbors of Polygons — get_neighbors","text":"","code":"library(spdep) #> Loading required package: spData #> To access larger datasets in this package, install the spDataLarge #> package with: `install.packages('spDataLarge', #> repos='https://nowosad.github.io/drat/', type='source')` #> Loading required package: sf #> Linking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE data(nc.sids) neighbors <- get_neighbors(polygons = nc.sids, distance=\"polygon\", connect=FALSE) #> Error in get_neighbors(polygons = nc.sids, distance = \"polygon\", connect = FALSE): unused argument (polygons = nc.sids)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Linear Model using INLA — inla_dlm","title":"Dynamic Linear Model using INLA — inla_dlm","text":"function fits dynamic linear model (DLM) input time series data, produces forecasts specified number periods using INLA method.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Linear Model using INLA — inla_dlm","text":"","code":"inla_dlm(ts_data, forecast_horizon)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic Linear Model using INLA — inla_dlm","text":"ts_data Time-series data numeric vector forecast_horizon number periods forecasts required","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic Linear Model using INLA — inla_dlm","text":"function returns list two elements: obs_fitted: numeric vector representing fitted values observation period including 7-day lag (EpiEstim). pred_trend: numeric vector representing predicted values forecast horizon.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic Linear Model using INLA — inla_dlm","text":"","code":"inla_dlm(c(10,12,16,18,22,26,30,34,40),5) #> Error in inla(dlm.form, family = \"gaussian\", data = ts_df, control.predictor = list(compute = TRUE)): could not find function \"inla\""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_forecasts_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot comparison of forecasts — plot_forecasts_compare","title":"Plot comparison of forecasts — plot_forecasts_compare","text":"function takes forecast data truth data, compares models plots relative overall performance time. Multiple file ingest formats available. function can scaled using specified model normalization. Graphics written file.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_forecasts_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot comparison of forecasts — plot_forecasts_compare","text":"","code":"plot_forecasts_compare(   forecast_data,   ingest = c(\"dataframe\", \"path\", \"list\"),   hub_forecasts = NULL,   truth,   missing = c(\"remove\", \"zero\"),   scale_model = NULL,   limit = NULL,   write_copy = TRUE )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_forecasts_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot comparison of forecasts — plot_forecasts_compare","text":"forecast_data dataframe containing forecast predictions exported RAPIDD API, list dataframes. ingest character string specifying format forecast_data input. Can one 'dataframe', 'path' 'list'. Defaults 'dataframe'. hub_forecasts (optional) dataframe containing hub forecasts predictions exported RAPIDD API. truth dataframe containing true values. missing character string specifying handle missing values true values dataset. Can one 'remove' 'zero'. Default 'remove'. scale_model (optional) character string specifying name model use reference scaling scores. limit (optional) numeric value upper limit score scale. Default NULL. write_copy (optional) Logical indicating whether save outputs current working directory. Default TRUE.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_forecasts_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot comparison of forecasts — plot_forecasts_compare","text":"ggplot2 object shows relative overall performance different models compared .","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_forecasts_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot comparison of forecasts — plot_forecasts_compare","text":"function applies scoringutils::score() function calculate interval scores (WIS), performs normalization step scale_model provided. Graphics written file current working directory.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_forecasts_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot comparison of forecasts — plot_forecasts_compare","text":"","code":"# Load example data data('example_test_forecasts') #> Warning: data set 'example_test_forecasts' not found data('example_hub_forecasts') #> Warning: data set 'example_hub_forecasts' not found data('example_truth_data') #> Warning: data set 'example_truth_data' not found  # Plot comparison of forecasts, with test data input as a dataframe plot_forecasts_compare(forecast_data = example_test_forecasts, hub_forecasts = example_hub_forecasts, truth = example_truth_data) #> Error in plot_forecasts_compare(forecast_data = example_test_forecasts,     hub_forecasts = example_hub_forecasts, truth = example_truth_data): object 'example_test_forecasts' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Location — plot_location","title":"Plot Location — plot_location","text":"function plot_location used create report hospital incidence provided location(s) forecasted data. report can include locations specific locations per user input.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Location — plot_location","text":"","code":"plot_location(plot_path = plot_paths, model = NULL, loc = NULL)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Location — plot_location","text":"plot_path character vector containing paths CSV files forecasted data. model character vector specifying type model. loc character vector speciyfing location visualized. parameter NULL, function generate reports available locations. Default value NULL.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Location — plot_location","text":"function returns ggplot object containing visualization hospital incidence specified location(s) forecasted data.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots neighborhood adjacency — plot_neighbors","title":"Plots neighborhood adjacency — plot_neighbors","text":"function takes polygon object corresponding neighborhood object, plots polygons neighbors map.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots neighborhood adjacency — plot_neighbors","text":"","code":"plot_neighbors(poly_obj, nb_obj)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots neighborhood adjacency — plot_neighbors","text":"poly_obj SpatialPolygonsDataFrame representing polygons. nb_obj nb object generated using 'spdep' package representing neighborhood relationship information.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots neighborhood adjacency — plot_neighbors","text":"ggplot object plotted polygons neighboring relationships.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots neighborhood adjacency — plot_neighbors","text":"function first extracts coordinates poly_obj creates data frame named coords columns \"long\" \"lat\". , generates set lines representing neighboring relationships polygons using nb2lines function. plots polygons neighbors map using ggplot2.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots neighborhood adjacency — plot_neighbors","text":"","code":"library(sp) library(spdep) library(ggplot2) library(sf)  data(columbus) nb_obj <- dnearneigh(coordinates(columbus), 0, 10000) #> Error in dnearneigh(coordinates(columbus), 0, 10000): ncol(x) == 2L || ncol(x) == 3L is not TRUE poly_obj <- columbus  plot_neighbors(poly_obj, nb_obj) #> Error in nb2lines(nb_obj, coords = coords, proj4string = proj4string(poly_obj)): object 'nb_obj' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_WIS_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot WIS Lines Function — plot_WIS_lines","title":"Plot WIS Lines Function — plot_WIS_lines","text":"function plots line chart heatmap Weighted Interval Score (WIS) different models /locations time.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_WIS_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot WIS Lines Function — plot_WIS_lines","text":"","code":"plot_WIS_lines(   scores_df,   by = c(\"tile\", \"date\"),   range = c(\"abs\", \"scaled\"),   scale_model = NULL,   limit = NULL )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_WIS_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot WIS Lines Function — plot_WIS_lines","text":"scores_df dataframe containing WIS scores, date, model, location_name columns. character vector specifying plot data. Valid options \"tile\" (heatmap) \"date\" (line chart). range character vector specifying type scaling apply WIS scores. Valid options \"abs\" (absolute scaling) \"scaled\" (scaling based another model's WIS scores). scale_model character vector indicating model use scaling range = \"scaled\". limit numeric vector specifying maximum value WIS score.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_WIS_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot WIS Lines Function — plot_WIS_lines","text":"function returns plot WIS scores according specified parameters.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Create model weights based on ranking and apply to forecast data — propose_weights","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"function creates weights based ranked dataframe models. takes either path containing csv files, list csv files, dataframe column named \"model_name\" containing respective model names applies weights model's predictions. output new csv file weighted ensemble forecast dataframe calculated weights.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"","code":"propose_weights(   forecast_data,   ingest = c(\"dataframe\", \"path\", \"list\"),   rank_df,   rankCol = NULL,   drop = NULL,   team = \"TeamName\",   mod_name = \"my_ensemble\" )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"forecast_data dataframe, path directory csv files, list csv files containing forecasts weighted. ingest character vector determines whether forecast_data parameter represents dataframe (\"dataframe\"), directory path string (e.g. \"./forecast_data\") csv files containing forecast data (\"path\"), list strings representing path csv file (\"list\"). rank_df dataframe containing columns model's name rank. rankCol name column rank_df dataframe contains ranking information. drop integer indicating many models bottom ranking excluded analysis. team string representing name team generating forecast data. mod_name string representing name weighted ensemble model.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"Returns dataframe containing calculated weights, ordered rank, writes csv file weighted ensemble forecast specified directory.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"","code":"props_weights <- propose_weights(forecast_data = \"path/to/forecast_data\", ingest = \"path\", rank_df, rankCol = \"rank\", drop = 2, team = \"my_team\", mod_name = \"weighted_ensemble\") #> Error in nrow(rank_df): object 'rank_df' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Project Rt values using ARIMA or DLM method — Rt_projection","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"function projects Rt (reproductive rate) values given time period location using either ARIMA DLM model.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"","code":"Rt_projection(   train_data,   mean_si = 5.7,   std_si = 2,   forecast_horizon = 28,   method = c(\"arima\", \"dlm\") )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"train_data dataframe columns date, location_name, value, value numeric vector representing number new cases incidences day location. mean_si numeric value representing mean serial interval disease modeled. Default 5.7. std_si numeric value representing standard deviation serial interval disease modeled. Default 2. forecast_horizon positive integer specifying number periods forecast method character vector specifying method use projecting Rt values. Valid options \"arima\" \"dlm\". Default \"arima\". forecast_horiz_start date string representing start time period project Rt values . forecast_horiz_end date string representing end time period project Rt values .","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"dataframe columns `train_data`, plus additional column `Rt` representing projected reproductive rate day location.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"","code":"# Load example data data(covid_cases) #> Warning: data set 'covid_cases' not found  # Project Rt values using default parameters and ARIMA method Rt_df <- Rt_projection(train_data = covid_cases,                         forecast_horiz_start = \"2020-04-12\",                         forecast_horiz_end = \"2020-04-26\") #> Error in Rt_projection(train_data = covid_cases, forecast_horiz_start = \"2020-04-12\",     forecast_horiz_end = \"2020-04-26\"): unused arguments (forecast_horiz_start = \"2020-04-12\", forecast_horiz_end = \"2020-04-26\")  # Project Rt values using DLM method Rt_df <- Rt_projection(train_data = covid_cases,                         forecast_horiz_start = \"2020-04-12\",                         forecast_horiz_end = \"2020-04-26\",                         method = \"dlm\") #> Error in Rt_projection(train_data = covid_cases, forecast_horiz_start = \"2020-04-12\",     forecast_horiz_end = \"2020-04-26\", method = \"dlm\"): unused arguments (forecast_horiz_start = \"2020-04-12\", forecast_horiz_end = \"2020-04-26\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/run_model_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a series of INLA models — run_model_list","title":"Run a series of INLA models — run_model_list","text":"function runs list INLA models specified formulas.list data stacked dataStack. function returns list model outputs names matching input formula names.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/run_model_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a series of INLA models — run_model_list","text":"","code":"run_model_list(   formulas.list,   dataStack,   likelihood = \"gaussian\",   config = FALSE,   verbose = FALSE,   archive = TRUE )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/run_model_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a series of INLA models — run_model_list","text":"formulas.list named list model formulas run. Names match desired output names. dataStack Stacked data object created inla.stack.data() function INLA package. likelihood character vector specifying likelihood family use model. length 1 character string provided, used models. character vector length n_models provided, applied order. config logical value indicating whether retain GMRF representation sampling. verbose logical value indicating whether print details screen running. archive logical value indicating whether save output archive file. Default TRUE.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/run_model_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a series of INLA models — run_model_list","text":"models_out list model outputs names corresponding input formula names.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"function calculates Mean Absolute Error (MAE) set forecasts corresponding true values.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"","code":"score_MAE(   forecast_data,   truth,   ingest = c(\"dataframe\", \"path\", \"list\"),   missing = c(\"remove\", \"zero\") )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"forecast_data dataframe, path list object containing forecast information truth dataframe containing true values compare forecasts ingest Character value indicating forecast data passed. Options \"dataframe\", \"path\", \"list\". Default \"dataframe\". missing Character value indicating handle missing NaN values truth data. Options \"remove\" \"zero\". \"remove\", data points missing true values removed calculation. \"zero\", data points missing true values assumed true value 0. Default \"remove\".","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"Returns data frame columns Model, MAE, MAPE, Rank, sorted ascending order MAE.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"","code":"score_MAE(forecast_data = my_forecasts, truth = my_truth, ingest = \"dataframe\", missing = \"remove\") #> Error in score_MAE(forecast_data = my_forecasts, truth = my_truth, ingest = \"dataframe\",     missing = \"remove\"): object 'my_forecasts' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Score WIS function — score_WIS","title":"Score WIS function — score_WIS","text":"function scores weighted interval scoring (WIS) given forecast data truth.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score WIS function — score_WIS","text":"","code":"score_WIS(   forecast_data,   truth,   ingest = c(\"dataframe\", \"path\", \"list\"),   missing = c(\"remove\", \"zero\") )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score WIS function — score_WIS","text":"forecast_data dataframe,directory path,list object providing forecast data columns including: model, date, location_name, forecast_date, quantile, value. Can also path list paths csv files. truth dataframe containing true values compare forecast data , columns including: date, location_name, value. ingest character vector specifying type input 'forecast_data', can either \"dataframe\", \"path\", \"list\". missing character vector specifying method handle missing true values scoring process. can either \"remove\" \"zero\".","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score WIS function — score_WIS","text":"Returns dataframe scores model, date, location, forecast_date combination based WIS metric.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score WIS function — score_WIS","text":"","code":"# score the WIS for some example forecast and truth dataframes library(scoringutils) example_forecast <- data.frame(model = c(\"model1\",\"model2\"), date = as.Date(c(\"2020-06-01\",\"2020-06-02\")), location_name = c(\"location1\",\"location2\"), forecast_date = as.Date(c(\"2020-06-03\",\"2020-06-04\")), quantile = 0.5, value = c(10,20)) example_truth <- data.frame(date = as.Date(c(\"2020-06-03\",\"2020-06-04\")), location_name = c(\"location1\",\"location2\"), value = c(8,22)) score_WIS(example_forecast, example_truth, \"dataframe\", \"remove\") #> Error in mutate(., prediction = value, model = model, date = as.Date(target_end_date),     forecast_date = as.Date(forecast_date), location_name = location): ℹ In argument: `date = as.Date(target_end_date)`. #> Caused by error in `as.Date()`: #> ! object 'target_end_date' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/setup_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to set up CovidCAR analysis — setup_analysis","title":"Function to set up CovidCAR analysis — setup_analysis","text":"function sets analysis converting report_date argument date object, calculating start end dates training period forecast horizon, generating full time span (character vector) training start date forecast horizon end date, setting local cache directory, creating output directory exist, returning specified output directory.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/setup_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to set up CovidCAR analysis — setup_analysis","text":"","code":"setup_analysis(   report_date,   training_period,   forecast_horizon,   output_dir = NULL,   local_cache_dir = NULL )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/setup_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to set up CovidCAR analysis — setup_analysis","text":"report_date Date string yyyy-mm-dd format training_period Numeric value representing length training period days forecast_horizon Numeric value representing length forecast horizon days output_dir Character string representing path output directory local_cache_dir Character string representing path local cache directory","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/setup_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to set up CovidCAR analysis — setup_analysis","text":"specified output directory returned used within function","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/time_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a temporal index for a given set of dates — time_index","title":"Generate a temporal index for a given set of dates — time_index","text":"function returns date y closest date x.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/time_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a temporal index for a given set of dates — time_index","text":"","code":"time_index(x, y)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/time_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a temporal index for a given set of dates — time_index","text":"x date vector, typically column dataframe indicating date observed case incidence. y vector dates search matches, typically customized series specified interval length.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/time_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a temporal index for a given set of dates — time_index","text":"vector dates y nearest matches dates given x","code":""}]
