[{"path":"https://jmhumphreys.github.io/CovidCAR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Humphreys. Author, maintainer.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Humphreys J (2023). CovidCAR: Forecast US Covid19 Hospital Incidence using Conditional Autoregressive Models. R package version 0.1.0, https://jmhumphreys.github.io/CovidCAR/.","code":"@Manual{,   title = {CovidCAR: Forecast US Covid19 Hospital Incidence using a Conditional Autoregressive Models},   author = {John Humphreys},   year = {2023},   note = {R package version 0.1.0},   url = {https://jmhumphreys.github.io/CovidCAR/}, }"},{"path":[]},{"path":"https://jmhumphreys.github.io/CovidCAR/index.html","id":"under-development","dir":"","previous_headings":"","what":"Under Development","title":"Forecast US Covid19 Hospital Incidence using a Conditional Autoregressive Models","text":"Package: CovidCARTitle: Forecast US Covid19 Hospital Incidence using Conditional AutoRegressive Model.Description: Package provides functions facilitate data pre-processing, Conditional Autoregressive (CAR) model construction, formatting model results submission covid19-forecast-hub.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Project Rt values using ARIMA or DLM method — Rt_projection","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"function projects Rt (reproductive rate) values given time period location using either ARIMA DLM model.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"","code":"Rt_projection(   train_data,   mean_si = 5.7,   std_si = 2,   forecast_horizon = 28,   method = c(\"arima\", \"dlm\") )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"train_data dataframe columns date, location_name, value, value numeric vector representing number new cases incidences day location. mean_si numeric value representing mean serial interval disease modeled. Default 5.7. std_si numeric value representing standard deviation serial interval disease modeled. Default 2. forecast_horizon positive integer specifying number periods forecast method character vector specifying method use projecting Rt values. Valid options \"arima\" \"dlm\". Default \"arima\". forecast_horiz_start date string representing start time period project Rt values . forecast_horiz_end date string representing end time period project Rt values .","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"dataframe columns `train_data`, plus additional column `Rt` representing projected reproductive rate day location.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/Rt_projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project Rt values using ARIMA or DLM method — Rt_projection","text":"","code":"# Load example data data(covid_cases) #> Warning: data set ‘covid_cases’ not found  # Project Rt values using default parameters and ARIMA method Rt_df <- Rt_projection(train_data = covid_cases,                         forecast_horiz_start = \"2020-04-12\",                         forecast_horiz_end = \"2020-04-26\") #> Error in Rt_projection(train_data = covid_cases, forecast_horiz_start = \"2020-04-12\",     forecast_horiz_end = \"2020-04-26\"): unused arguments (forecast_horiz_start = \"2020-04-12\", forecast_horiz_end = \"2020-04-26\")  # Project Rt values using DLM method Rt_df <- Rt_projection(train_data = covid_cases,                         forecast_horiz_start = \"2020-04-12\",                         forecast_horiz_end = \"2020-04-26\",                         method = \"dlm\") #> Error in Rt_projection(train_data = covid_cases, forecast_horiz_start = \"2020-04-12\",     forecast_horiz_end = \"2020-04-26\", method = \"dlm\"): unused arguments (forecast_horiz_start = \"2020-04-12\", forecast_horiz_end = \"2020-04-26\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"function extracts region data location given shapefile. also adds additional columns day week training testing data flag.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"","code":"append_region_index(train_data, polys)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"train_data data frame containing training data. polys Shapefile object containing state boundaries regions.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"Returns modified train_data dataframe new columns: day, trn_tst, Region.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/append_region_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Region Index from Spatial Object and Partition Training and Testing Data — append_region_index","text":"","code":"append_region_index(train_df, states_sf, as.Date(\"2020-12-31\")) #> Error in append_region_index(train_df, states_sf, as.Date(\"2020-12-31\")): unused argument (as.Date(\"2020-12-31\"))"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Forecast Template — create_forecast_template","title":"Create a Forecast Template — create_forecast_template","text":"function creates forecast template given dataset output includes unique locations input data specified forecast horizon.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Forecast Template — create_forecast_template","text":"","code":"create_forecast_template(train_data)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Forecast Template — create_forecast_template","text":"train_data Input data used create forecast template.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Forecast Template — create_forecast_template","text":"Returns data frame containing forecast template. output following columns: location, date, value, signal, day, trn_tst. row output dataframe contain unique location input dataset, dates ranging forecast_horiz_start forecast_horiz_end. values value column left NA. signal column set \"hosp\" indicating hospital data. day column specifies weekday corresponding date. trn_tst column indicates whether observation part training test dataset. forecast template, rows \"test\". final output contains distinct observations respect columns date location. Additionally, dataset returned function contains additional column named 'Region' joined original input data.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/create_forecast_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Forecast Template — create_forecast_template","text":"","code":"library(dplyr) #> Error in library(dplyr): there is no package called ‘dplyr’ library(lubridate) #> Error in library(lubridate): there is no package called ‘lubridate’ # create sample data date_data <- seq(as.Date(\"2021-01-01\"), as.Date(\"2021-01-31\"), by = \"day\") loc_data <- c('loc1', 'loc2') val_data <- c(1, 2) hosp_data <- rep('hosp', length(date_data)) day_data <- weekdays(date_data) trn_tst_data <- 'train' data <- data.frame(date = rep(date_data, length(loc_data)),                    location = rep(loc_data, each = length(date_data)),                    value = rep(val_data, each = length(date_data)),                    signal = hosp_data,                    day = rep(day_data, length(loc_data)),                    trn_tst = trn_tst_data)  create_forecast_template(data, as.Date(\"2021-02-01\"), as.Date(\"2021-02-10\")) #> Error in create_forecast_template(data, as.Date(\"2021-02-01\"), as.Date(\"2021-02-10\")): unused arguments (as.Date(\"2021-02-01\"), as.Date(\"2021-02-10\"))"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Download US Boundaries — download_boundaries","title":"Download US Boundaries — download_boundaries","text":"Downloads extracts shapefiles either US states counties. creates directory specified location one exist already. function downloads shapefile specified URL, unzips , reads object class 'sf', changes projection \"EPSG:5070\", fixes topology, matches state name observation data assigns unique identifiers.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download US Boundaries — download_boundaries","text":"","code":"download_boundaries(unit = \"state\", proj = \"EPSG:5070\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download US Boundaries — download_boundaries","text":"unit character string indicating whether download state county borders, default \"state\". proj Projection shapefiles, defaults \"EPSG:5070\".","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download US Boundaries — download_boundaries","text":"object class 'SpatialPolygonsDataFrame' contains state county border polygons associated attributes.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/download_boundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download US Boundaries — download_boundaries","text":"","code":"{ #Download state boundaries to a directory called 'States': download_boundaries(\"./States\")  #Download county boundaries to a directory called 'Counties': download_boundaries(\"./Counties\", unit = \"county\") } #> Error in download_boundaries(\"./States\"): object 'su_yaml' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/extract_forecasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract forecasts from a model — extract_forecasts","title":"Extract forecasts from a model — extract_forecasts","text":"function extracts forecasts INLA model object formats data submission Covid19-forecast-hub (https://github.com/reichlab/covid19-forecast-hub).","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/extract_forecasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract forecasts from a model — extract_forecasts","text":"","code":"extract_forecasts(mod_out, dataStack, train_data, team = \"TeamName\")"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/extract_forecasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract forecasts from a model — extract_forecasts","text":"mod_out fitted model object train_data training data used fit model nrm.stk object class 'inla.stack'","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/extract_forecasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract forecasts from a model — extract_forecasts","text":"data frame columns forecast date, location, target, target end date, type value (quantile point), quantile value (applicable), forecast value required submission Covid19-forecast-hub.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast Time Series — forecast_time_series","title":"Forecast Time Series — forecast_time_series","text":"function takes time series data generates forecast specified number periods. function fits ARIMA model data uses generate forecast. data clear seasonal pattern, function fits seasonal ARIMA model. function returns two lists: obs_fitted (fitted values observation period) pred_trend (predicted trend forecast horizon).","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast Time Series — forecast_time_series","text":"","code":"forecast_time_series(ts_data, forecast_horizon, season_period = NULL)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast Time Series — forecast_time_series","text":"ts_data time series object numeric vector forecast_horizon positive integer specifying number periods forecast season_period optional parameter specifying seasonal period time series","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast Time Series — forecast_time_series","text":"list containing observations predicted trend forecast horizon","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/forecast_time_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecast Time Series — forecast_time_series","text":"","code":"# generate a time series data ts_data <- ts(rnorm(100), frequency = 12, start = c(2014, 1)) # generate a forecast for next 6 periods using auto.arima() with default settings forecast_time_series(ts_data, 6) #> Error in forecast_time_series(ts_data, 6): object 'su_yaml' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"function retrieves poverty data population data grouped age Census API, filters data processes return merged dataframe relevant information.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"","code":"getPovertyPop(key, vars_pov, vars_pop, filt_age)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"key character string containing valid value user's Census API key. vars_pov character vector specifies variables retrieved poverty data. vars_pop character vector specifies variables retrieved population data. filt_age integer vector length two specifying minimum maximum age group filter population data.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"merged dataframe poverty population count state.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/getPovertyPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a merged dataframe with poverty and population data by state for specified age range. — getPovertyPop","text":"","code":"data <- getPovertyPop(\"my_census_key\", c(\"SAEMHI_PT\"), c(\"POP\"), c(12, 18)) #> Error in getCensus(name = \"timeseries/poverty/saipe\", key = key, vars = vars_pov,     region = \"state:*\", time = \"2020\"): could not find function \"getCensus\""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain COVID-19 observed data based on the chosen source — get_covid19_obs","title":"Obtain COVID-19 observed data based on the chosen source — get_covid19_obs","text":"function obtains COVID-19 observed data either covidcast API, local cache test data returns data frame.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain COVID-19 observed data based on the chosen source — get_covid19_obs","text":"","code":"get_covid19_obs(   source = c(\"covidcast\", \"cache\", \"test\"),   start_date,   end_date,   write_copy = TRUE )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain COVID-19 observed data based on the chosen source — get_covid19_obs","text":"source character string indicating source data obtained. Possible values \"covidcast\" obtaining data covidcast API, \"cache\" obtaining data local cache \"test\" obtaining test data. start_date character string format \"YYYY-MM-DD\" indicating start date data obtained. end_date character string format \"YYYY-MM-DD\" indicating end date data obtained.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_covid19_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain COVID-19 observed data based on the chosen source — get_covid19_obs","text":"Data frame containing COVID-19 observed data.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the model name from a filename — get_model_name","title":"Get the model name from a filename — get_model_name","text":"function takes filename .csv format returns model name. function removes \".csv\" extension, finds last occurrence \"-\" filename, removes text preceding last dash (including dash ).","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the model name from a filename — get_model_name","text":"","code":"get_model_name(filename)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the model name from a filename — get_model_name","text":"filename character string representing filename.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_model_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the model name from a filename — get_model_name","text":"character string representing model name.","code":""},{"path":[]},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Neighbors of Polygons — get_neighbors","title":"Get Neighbors of Polygons — get_neighbors","text":"function takes set polygons calculates neighbors based either polygon adjacency polygon distance centroid.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Neighbors of Polygons — get_neighbors","text":"","code":"get_neighbors(polys, distance = \"centroid\", connect = TRUE)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Neighbors of Polygons — get_neighbors","text":"polys SpatialPolygons object containing polygons calculate neighbourhoods. distance method calculate distances polygons. Set \"centroid\" (default) use distance centroids polygons, \"polygon\" measure distances polygons . connect Logical. Whether create neighborhood list based polygon adjacency (TRUE) polygon connectivity (FALSE).","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Neighbors of Polygons — get_neighbors","text":"'neighbours' object created using 'poly2nb' function spdep package. neighbours object list integer vectors, one vector per spatial unit (polygon), describing indices polys object define neighbouring spatial units.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/get_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Neighbors of Polygons — get_neighbors","text":"","code":"library(spdep) #> Error in library(spdep): there is no package called ‘spdep’ data(nc.sids) #> Warning: data set ‘nc.sids’ not found neighbors <- get_neighbors(polygons = nc.sids, distance=\"polygon\", connect=FALSE) #> Error in get_neighbors(polygons = nc.sids, distance = \"polygon\", connect = FALSE): unused argument (polygons = nc.sids)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Linear Model using INLA — inla_dlm","title":"Dynamic Linear Model using INLA — inla_dlm","text":"function fits dynamic linear model (DLM) input time series data, produces forecasts specified number periods using INLA method.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Linear Model using INLA — inla_dlm","text":"","code":"inla_dlm(ts_data, forecast_horizon)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic Linear Model using INLA — inla_dlm","text":"ts_data Time-series data numeric vector forecast_horizon number periods forecasts required","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic Linear Model using INLA — inla_dlm","text":"function returns list two elements: obs_fitted: numeric vector representing fitted values observation period including 7-day lag (EpiEstim). pred_trend: numeric vector representing predicted values forecast horizon.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/inla_dlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic Linear Model using INLA — inla_dlm","text":"","code":"inla_dlm(c(10,12,16,18,22,26,30,34,40),5) #> Error in inla(dlm.form, family = \"gaussian\", data = ts_df, control.predictor = list(compute = TRUE)): could not find function \"inla\""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_WIS_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot WIS Lines Function — plot_WIS_lines","title":"Plot WIS Lines Function — plot_WIS_lines","text":"function plots line chart heatmap Weighted Interval Score (WIS) different models /locations time.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_WIS_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot WIS Lines Function — plot_WIS_lines","text":"","code":"plot_WIS_lines(   scores_df,   by = c(\"tile\", \"date\"),   range = c(\"abs\", \"scaled\"),   scale_model = NULL,   limit = NULL )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_WIS_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot WIS Lines Function — plot_WIS_lines","text":"scores_df dataframe containing WIS scores, date, model, location_name columns. character vector specifying plot data. Valid options \"tile\" (heatmap) \"date\" (line chart). range character vector specifying type scaling apply WIS scores. Valid options \"abs\" (absolute scaling) \"scaled\" (scaling based another model's WIS scores). scale_model character vector indicating model use scaling range = \"scaled\". limit numeric vector specifying maximum value WIS score.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_WIS_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot WIS Lines Function — plot_WIS_lines","text":"function returns plot WIS scores according specified parameters.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots neighborhood adjacency — plot_neighbors","title":"Plots neighborhood adjacency — plot_neighbors","text":"function takes polygon object corresponding neighborhood object, plots polygons neighbors map.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots neighborhood adjacency — plot_neighbors","text":"","code":"plot_neighbors(poly_obj, nb_obj)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots neighborhood adjacency — plot_neighbors","text":"poly_obj SpatialPolygonsDataFrame representing polygons. nb_obj nb object generated using 'spdep' package representing neighborhood relationship information.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots neighborhood adjacency — plot_neighbors","text":"ggplot object plotted polygons neighboring relationships.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots neighborhood adjacency — plot_neighbors","text":"function first extracts coordinates poly_obj creates data frame named coords columns \"long\" \"lat\". , generates set lines representing neighboring relationships polygons using nb2lines function. plots polygons neighbors map using ggplot2.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/plot_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots neighborhood adjacency — plot_neighbors","text":"","code":"library(sp) #> Error in library(sp): there is no package called ‘sp’ library(spdep) #> Error in library(spdep): there is no package called ‘spdep’ library(ggplot2) #> Error in library(ggplot2): there is no package called ‘ggplot2’ library(sf) #> Error in library(sf): there is no package called ‘sf’  data(columbus) #> Warning: data set ‘columbus’ not found nb_obj <- dnearneigh(coordinates(columbus), 0, 10000) #> Error in dnearneigh(coordinates(columbus), 0, 10000): could not find function \"dnearneigh\" poly_obj <- columbus #> Error in eval(expr, envir, enclos): object 'columbus' not found  plot_neighbors(poly_obj, nb_obj) #> Error in coordinates(poly_obj): could not find function \"coordinates\""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Create model weights based on ranking and apply to forecast data — propose_weights","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"function creates weights based ranked dataframe models. takes either path containing csv files, list csv files, dataframe column named \"model_name\" containing respective model names applies weights model's predictions. output new csv file weighted ensemble forecast dataframe calculated weights.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"","code":"propose_weights(   forecast_data,   ingest = c(\"dataframe\", \"path\", \"list\"),   rank_df,   rankCol = NULL,   drop = NULL,   team = \"TeamName\",   mod_name = \"my_ensemble\" )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"forecast_data dataframe, path directory csv files, list csv files containing forecasts weighted. ingest character vector determines whether forecast_data parameter represents dataframe (\"dataframe\"), directory path string (e.g. \"./forecast_data\") csv files containing forecast data (\"path\"), list strings representing path csv file (\"list\"). rank_df dataframe containing columns model's name rank. rankCol name column rank_df dataframe contains ranking information. drop integer indicating many models bottom ranking excluded analysis. team string representing name team generating forecast data. mod_name string representing name weighted ensemble model.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"Returns dataframe containing calculated weights, ordered rank, writes csv file weighted ensemble forecast specified directory.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/propose_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create model weights based on ranking and apply to forecast data — propose_weights","text":"","code":"props_weights <- propose_weights(forecast_data = \"path/to/forecast_data\", ingest = \"path\", rank_df, rankCol = \"rank\", drop = 2, team = \"my_team\", mod_name = \"weighted_ensemble\") #> Error in eval(expr, envir, enclos): object 'rank_df' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/run_model_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a series of INLA models — run_model_list","title":"Run a series of INLA models — run_model_list","text":"function runs list INLA models specified formulas.list data stacked dataStack. function returns list model outputs names matching input formula names.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/run_model_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a series of INLA models — run_model_list","text":"","code":"run_model_list(   formulas.list,   dataStack,   likelihood = \"gaussian\",   config = FALSE,   verbose = FALSE,   archive = TRUE )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/run_model_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a series of INLA models — run_model_list","text":"formulas.list named list model formulas run. Names match desired output names. dataStack Stacked data object created inla.stack.data() function INLA package. likelihood character vector specifying likelihood family use model. length 1 character string provided, used models. character vector length n_models provided, applied order. config logical value indicating whether retain GMRF representation sampling. verbose logical value indicating whether print details screen running. archive logical value indicating whether save output archive file. Default TRUE.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/run_model_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a series of INLA models — run_model_list","text":"models_out list model outputs names corresponding input formula names.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"function calculates Mean Absolute Error (MAE) set forecasts corresponding true values.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"","code":"score_MAE(   forecast_data,   truth_data,   ingest = c(\"dataframe\", \"path\", \"list\"),   missing = c(\"remove\", \"zero\") )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"forecast_data dataframe, path list object containing forecast information truth_data dataframe containing true values compare forecasts ingest Character value indicating forecast data passed. Options \"dataframe\", \"path\", \"list\". Default \"dataframe\". missing Character value indicating handle missing NaN values truth data. Options \"remove\" \"zero\". \"remove\", data points missing true values removed calculation. \"zero\", data points missing true values assumed true value 0. Default \"remove\".","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"Returns data frame columns Model, MAE, MAPE, Rank, sorted ascending order MAE.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_MAE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mean Absolute Error given forecast and truth data — score_MAE","text":"","code":"score_MAE(forecast_data = my_forecasts, truth_data = my_truth, ingest = \"dataframe\", missing = \"remove\") #> Error in eval(expr, envir, enclos): object 'my_forecasts' not found"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":null,"dir":"Reference","previous_headings":"","what":"Score WIS function — score_WIS","title":"Score WIS function — score_WIS","text":"function scores weighted interval scoring (WIS) given forecast data truth.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score WIS function — score_WIS","text":"","code":"score_WIS(   forecast_data,   truth,   ingest = c(\"dataframe\", \"path\", \"list\"),   missing = c(\"remove\", \"zero\") )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score WIS function — score_WIS","text":"forecast_data dataframe,directory path,list object providing forecast data columns including: model, date, location_name, forecast_date, quantile, value. Can also path list paths csv files. truth dataframe containing true values compare forecast data , columns including: date, location_name, value. ingest character vector specifying type input 'forecast_data', can either \"dataframe\", \"path\", \"list\". missing character vector specifying method handle missing true values scoring process. can either \"remove\" \"zero\".","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score WIS function — score_WIS","text":"Returns dataframe scores model, date, location, forecast_date combination based WIS metric.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/score_WIS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score WIS function — score_WIS","text":"","code":"# score the WIS for some example forecast and truth dataframes library(scoringutils) #> Error in library(scoringutils): there is no package called ‘scoringutils’ example_forecast <- data.frame(model = c(\"model1\",\"model2\"), date = as.Date(c(\"2020-06-01\",\"2020-06-02\")), location_name = c(\"location1\",\"location2\"), forecast_date = as.Date(c(\"2020-06-03\",\"2020-06-04\")), quantile = 0.5, value = c(10,20)) example_truth <- data.frame(date = as.Date(c(\"2020-06-03\",\"2020-06-04\")), location_name = c(\"location1\",\"location2\"), value = c(8,22)) score_WIS(example_forecast, example_truth, \"dataframe\", \"remove\") #> Error in score_WIS(example_forecast, example_truth, \"dataframe\", \"remove\"): length(forecast_data$model_name) != 0 is not TRUE"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/setup_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to set up CovidCAR analysis — setup_analysis","title":"Function to set up CovidCAR analysis — setup_analysis","text":"function sets analysis converting report_date argument date object, calculating start end dates training period forecast horizon, generating full time span (character vector) training start date forecast horizon end date, setting local cache directory, creating output directory exist, returning specified output directory.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/setup_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to set up CovidCAR analysis — setup_analysis","text":"","code":"setup_analysis(   report_date,   training_period,   forecast_horizon,   output_dir = NULL,   local_cache_dir = NULL )"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/setup_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to set up CovidCAR analysis — setup_analysis","text":"report_date Date string yyyy-mm-dd format training_period Numeric value representing length training period days forecast_horizon Numeric value representing length forecast horizon days output_dir Character string representing path output directory local_cache_dir Character string representing path local cache directory","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/setup_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to set up CovidCAR analysis — setup_analysis","text":"specified output directory returned used within function","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/time_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a temporal index for a given set of dates — time_index","title":"Generate a temporal index for a given set of dates — time_index","text":"function returns date y closest date x.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/time_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a temporal index for a given set of dates — time_index","text":"","code":"time_index(x, y)"},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/time_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a temporal index for a given set of dates — time_index","text":"x date vector, typically column dataframe indicating date observed case incidence. y vector dates search matches, typically customized series specified interval length.","code":""},{"path":"https://jmhumphreys.github.io/CovidCAR/reference/time_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a temporal index for a given set of dates — time_index","text":"vector dates y nearest matches dates given x","code":""},{"path":[]}]
